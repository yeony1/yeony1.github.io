{"meta":{"title":"Yeony","subtitle":"Yeony's Blog","description":"Yeony의 블로그","author":"Seung-yeon","url":"https://yeony1.github.io"},"pages":[],"posts":[{"title":"스코프(Scope)","slug":"js02","date":"2018-04-21T02:18:26.000Z","updated":"2018-04-21T07:54:08.251Z","comments":true,"path":"2018/04/21/js02/","link":"","permalink":"https://yeony1.github.io/2018/04/21/js02/","excerpt":"","text":"Scope란, 사전적 의미로 범위를 말한다.즉, 변수가 사용되는 범위를 말한다.자바스크립트에서 스코프와 변수는 두가지로 구분할 수 있다. Scope의 종류 전역 스코프 (Global Scope) : 코드 어디에서든지 참조할 수 있다. 지역 스코프 (Local Scope) : 정의된 함수 안에서만 참조할 수 있다. 변수의 종류 전역 변수 : 전역 Scope를 갖는 변수. 지역 변수 : 지역 Scope를 갖는 변수. 변수는 선언되는 위치에 의해서 Scope를 갖게된다. 전역에 선언된 전역변수는 전역 스코프를 갖고, 지역에 선언된 지역변수는 지역 스코프를 갖는다.전역 스코프를 갖은 전역변수는 코드 어디에서든지 참조할 수 있고, 지역 스코프를 갖은 지역변수는 정의된 함수 안에서만 참조할 수 있다. 아래의 코드로 이해해보자.123456789101112131415161718192021var str1 = &quot;Hello&quot;;if(true)&#123; var str1 = &quot;world&quot;;&#125;console.log(str1); //world/*Hello가 출력될 것 같지만,자바스크립트는 함수형스코프이므로함수코드블록 안에 선언된 변수만 참조할 수 있기 때문이다.즉, 변수 str1은 전역변수이고 전역스코프 이므로 world가 출력된다.*/var str2 = &quot;java&quot;;function scope()&#123; var str2 = &quot;script&quot;;&#125;console.log(str2); //java/*함수밖에 있는 str2 변수는 전역변수이고 함수안에 있는 str2 변수는 지역변수이다.함수안에서 console.log을 찍었다면 script가 출력될 것이다.*/ 하지만, es6가 도입되면서 자바스크립트에서도 블록형스코프를 사용할 수 있다.es6에는 let과 const라는 변수 선언 방식이 새로 추가되었다.위의 str1과 str2를 출력할때와 다르게 es6에서 let과 const를 사용하면 블록스코프로 사용할 수 있다. 123456789101112let str3 = &quot;es6&quot;;if(true)&#123; let str3 = &quot;variable&quot;;&#125;console.log(str3); //es6const str4 = &quot;es6&quot;;if(true)&#123; const str4 = &quot;variable&quot;;&#125;console.log(str4); //es6 앞서 설명한 내용 중, 블록형스코프(block-level scope)와 함수형스코프(function-level scope)의 개념이 있다.블록형스코프는 코드블록({…})안에서 유효한 Scope를 뜻하고 C나 java와 같은 언어에서 사용된다.함수형스코프는 함수코드블록 안에서 선언된 변수만 참조하는 Scope를 뜻하고 함수 외부에서는 참조할 수 없다. 자바스크립트가 대표적인 함수형스코프이다 [참조] http://poiemaweb.com/js-scope INSIDE JavaScript","categories":[{"name":"Dev","slug":"Dev","permalink":"https://yeony1.github.io/categories/Dev/"},{"name":"javaScript","slug":"Dev/javaScript","permalink":"https://yeony1.github.io/categories/Dev/javaScript/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"https://yeony1.github.io/tags/javaScript/"}]},{"title":"호이스팅(Hoisting)","slug":"js01","date":"2018-04-19T06:49:37.000Z","updated":"2018-04-21T07:54:21.087Z","comments":true,"path":"2018/04/19/js01/","link":"","permalink":"https://yeony1.github.io/2018/04/19/js01/","excerpt":"","text":"호이스팅이란, 변수나 함수 선언문 등을 포함한 모든 선언문이 해당 Scope의 선두로 옮겨진 것처럼 동작하는 것을 말한다.즉 자바스크립트는 모든 선언문(var, let, const, function 등)이 선언되기 이전에 참조 가능하다. 아래 코드를 통해 확인 해보기 전에, 변수가 생성될때는 3단계 과정을 거치게 되는데, 이를 먼저 이해하자. 변수 선언 단계 선언단계변수 객체에 변수를 등록한다. 이 변수 객체는 Scope가 참조하는 대상이 된다.(변수상태 : ReferenceError) 초기화단계변수 객체에 등록된 변수를 메모리에 할당한다.(변수상태 : undefined로 초기화) 할당단계undefined로 초기화된 변수에 실제값을 할당한다.(변수상태 : 변수의 타입과 값을 갖음) 123console.log(foo);var foo = &quot;1234&quot;;console.log(foo); 1번째 라인에서 변수가 선언되기 전 단계이므로 ReferenceError가 나타날 것을 예상했지만, 실제로 undefined가 출력됬다.이것은 자바스크립트의 호이스팅 때문이고, 정확히는 변수 호이스팅이다. (다른언어 제외, 오직 자바스크립트에서만)2번째 라인에 var foo;가 먼저 상위로 옮겨져 undefined로 초기화 된 것이다.그 후, foo 변수에 1234라는 String타입의 값이 할당되는 것을 볼 수 있다. [참조] http://poiemaweb.com/js-data-type-variable#24-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85variable-hoisting","categories":[{"name":"Dev","slug":"Dev","permalink":"https://yeony1.github.io/categories/Dev/"},{"name":"javaScript","slug":"Dev/javaScript","permalink":"https://yeony1.github.io/categories/Dev/javaScript/"}],"tags":[{"name":"javaScript","slug":"javaScript","permalink":"https://yeony1.github.io/tags/javaScript/"}]},{"title":"아무것도 아닌 지금은 없다","slug":"book01","date":"2018-02-17T09:04:34.000Z","updated":"2018-04-09T08:15:56.786Z","comments":true,"path":"2018/02/17/book01/","link":"","permalink":"https://yeony1.github.io/2018/02/17/book01/","excerpt":"","text":"이 책이 처음 나왔을 때부터 읽고 싶었던 책이었다.하지만 계속 지나치다가 어느 날 약속 시각보다 친구가 늦어져 서점에서 이 책을 골라 읽어보았다.오랜만에 너무 재미있고 공감되는 책이라 금세 절반 가까이 읽게 되었다.약속 시각보다 늦은 친구가 왔을 때, 책을 더는 읽지 못한다는 생각에 아쉬웠다.그래서 책을 구매하게 되었다. 최근, 자신감이 많이 떨어져 있던 내게 많은 용기와 힘을 북돋아 주는 책이었다.가장 기억에 남는 문구는 아래와 같다. 기억하자. 당신이 지금 여기까지 올 수 있었던 건잘하지 못한 일들을당신 스스로 하나씩 해냈기 때문이라는 걸. 이 글을 읽었을 때 많은 위로를 받고 힘을 받았다.그동안 나는 나 자신을 너무 매몰차게만 대하고 아껴주지 못했던 것 같다는 생각이 들었다.나 자신을 조금 더 배려하고 하찮지 않게 대해야겠다.","categories":[{"name":"Life","slug":"Life","permalink":"https://yeony1.github.io/categories/Life/"},{"name":"Book","slug":"Life/Book","permalink":"https://yeony1.github.io/categories/Life/Book/"}],"tags":[{"name":"book","slug":"book","permalink":"https://yeony1.github.io/tags/book/"}]},{"title":"Git이란?","slug":"git01","date":"2018-02-13T02:26:19.000Z","updated":"2018-04-09T08:15:56.773Z","comments":true,"path":"2018/02/13/git01/","link":"","permalink":"https://yeony1.github.io/2018/02/13/git01/","excerpt":"","text":"# Git? 만든이 : 리눅스의 아버지 리누스 토발즈 프로그램 등의 소스코드 관리를 위한 분산 버전 관리 시스템 # 버전관리란? VCS (Version Control System) : 버전을 관리하는 시스템 버전관리를 왜 해야 할까? 변경/수정 내용 관리 각 파일을 이전 상태로 복구 가능 시간에 따른 수정 내용 비교 가능 누가 언제 만든 코드인지 파악 가능 # SVN vs Git Git은 위의 설명 처럼, 분산 버전 관리 시스템중의 하나이다.버전 관리 시스템에는 로컬 버전관리, 중앙집중식 버전관리, 분산 버전관리 3가지로 구분된다. 1. 로컬 버전관리 디렉토리로 파일 복사 2. 중앙집중식 버전관리 소스코드의 효율적인 관리 브랜치 사용가능 파일을 관리하는 서버가 별도로 존재 클라이언트가 중앙 서버에서 파일을 받아서 사용(checkout) 3. 분산 버전관리 소스크도의 효율적인 관리 브랜치 사용가능 네트워크나 중앙서버에 의존X SHA1 해시 사용하여 체크섬(로그)생성 변동사항 없으면 파일저장X, 이전상태 파일의 링크만 저장 로컬 버전관리 중앙집중식 버전관리 분산 버전관리 - 디렉토리로 파일 복사(ex 날짜순) - 소스코드의 효율적인 관리- 브랜치 사용가능 - 소스코드의 효율적인 관리- 브랜치 사용가능 - 파일을 관리하는 서버가별도로 존재- 클라이언트가 중앙 서버에서파일을 받아서 사용(checkout) - 네트워크나 중앙서버에 의존X- SHA1 해시 사용하여 체크섬(로그)생성- 변동사항 없으면 파일저장X,이전상태 파일의 링크만 저장","categories":[{"name":"Dev","slug":"Dev","permalink":"https://yeony1.github.io/categories/Dev/"},{"name":"Git","slug":"Dev/Git","permalink":"https://yeony1.github.io/categories/Dev/Git/"}],"tags":[{"name":"git","slug":"git","permalink":"https://yeony1.github.io/tags/git/"}]},{"title":"블로그를 시작하다","slug":"blog-start","date":"2018-01-10T06:21:47.000Z","updated":"2018-04-09T08:15:54.432Z","comments":true,"path":"2018/01/10/blog-start/","link":"","permalink":"https://yeony1.github.io/2018/01/10/blog-start/","excerpt":"","text":"# 1. 블로그 시작 계기 드디어 블로그를 시작하게 되었다. 신입때 팀장님의 권유로 항상 필요한 정보나 메모, 기타 등등은 Evernote를 이용해서 저장해서 보곤 했는데,언젠가 부터 드는 생각이 있었다.에버노트를 무료로 사용하고 있었기에 저장용량에 대한 한계가 있고 나 혼자만 본다는 것이다. 기술블로그를 가지고 있는 사람들은 자신이 가지고있는 정보를 쉽게 풀어써서 다른이들에게 공유한다. 나 역시 이런 기술블로그들을 보면서 많은 도움을 받았었고 지금도 받고있고 앞으로도 받을 것 같다.또한 나의 생각을 정리할 수 있는 그런 공간으로 사용하기 위해 블로그를 시작하게 되었다. # 2. 블로그 선택 블로그를 해야겠다는 생각을 하면서 대표적으로네이버, 티스토리, git을 이용한 블로그 이렇게 3가지로 축약했다.그중에서 네이버는 확실히 구글에서 검색빈도가 낮아 배재시켰다.티스토리는 초대장을 있어야 할 수 있다고 한다.그리하여 git을 이용한 블로그를 만들게 되었다.막상 git으로 블로그를 만들려 하니, 알아야하는게 이만저만이 아니였다.git으로 할 수 있는 방법으로는 Ruby기반의 Jekyll이나 Node기반의 hexo를 이용할 수 있다.Ruby보다는 Node의 장벽이 낮았기에 Node기반의 hexo로 블로그를 만들게 되었다.하지만 hexo를 이용한 블로그 시작이 결코 만만하지는 않았다.첫 글을 올리는데 7일~10일 정도는 투자한것같다… 열심히 해보자!","categories":[{"name":"Life","slug":"Life","permalink":"https://yeony1.github.io/categories/Life/"},{"name":"Etc","slug":"Life/Etc","permalink":"https://yeony1.github.io/categories/Life/Etc/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://yeony1.github.io/tags/blog/"}]}]}